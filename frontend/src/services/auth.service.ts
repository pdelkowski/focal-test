import fetchAPI from "utils/fetchAPI";
import { Activity } from "types/user";

export type LoginParams = {
  email: string;
  password: string;
};

export type LoginOPTParams = {
  otp_session_id: string; // this a 'sessison token' generated by backend in order to identify a 2FA login attempt, we don't want to send to the backend password & login again
  otp_code: string; // a 'code' that user 'receives' via eg. text message
};

export interface LoginResponse extends Response {
  otp_required: boolean;
  access_token: string;
  otp_session_id: string;
}

export interface ActivitiesResponse extends Response {
  data: Array<Activity>;
}

const login = async (formData: LoginParams) => {
  const options = {
    method: "POST",
    body: JSON.stringify(formData),
  };

  const response = await fetchAPI<LoginResponse>('/auth/login', options);
  return response;
};

const loginConfirm = async (formData: LoginOPTParams) => {
  const options = {
    method: "POST",
    body: JSON.stringify(formData),
  };

  const response = await fetchAPI<LoginResponse>('/auth/login_confirm', options);
  return response;
};

const retrieveActivities = async () => {
  const options = {
    method: "GET",
  };

  const response = await fetchAPI<ActivitiesResponse>('/users/activities', options);
  return response;
};

const authService = {
  login,
  loginConfirm,
  retrieveActivities
};

export default authService;
